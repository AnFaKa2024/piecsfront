Estruture o Código com Base na Integração Futura
Prepare o front-end para chamadas reais ao back-end em Java no futuro. Isso significa criar funções reutilizáveis para comunicação com a API.

Exemplo de função de API centralizada:


export const api = {
  async getBeneficiarios() {
    const response = await fetch("/api/beneficiarios"); // Substitua pelo endpoint do Java futuramente
    return response.json();
  },
  async addBeneficiario(beneficiario) {
    const response = await fetch("/api/beneficiarios", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(beneficiario),
    });
    return response.json();
  },
  async deleteBeneficiario(id) {
    const response = await fetch(`/api/beneficiarios/${id}`, {
      method: "DELETE",
    });
    return response.json();
  },
};


---------------------------------------
USO NO COMPONENTE


import { api } from "@/services/api";

const fetchBeneficiarios = async () => {
  const data = await api.getBeneficiarios();
  setBeneficiarios(data);
};

const adicionarBeneficiario = async () => {
  const novoBeneficiario = { id: uuidv4(), nome: "", email: "" };
  await api.addBeneficiario(novoBeneficiario);
  setBeneficiarios([...beneficiariosState, novoBeneficiario]);
};
